position=position_dodge(width=0.9), width=0.25)+
xlab('Joint Action')+
ylab('Mean Trust Rating')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
library(ggplot2)
Means.Table$Condition<-factor(Means.Table$Condition,
levels = c("ADHD","Control","Trauma"),
labels = c("ADHD","Control","Trauma"))
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col()+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Joint Action')+
ylab('Mean Trust Rating')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
library(dplyr)
Means.Table<-hyperactivity_study %>%
group_by(Condition) %>%
summarise(N=n(),
Means=mean(Hyperactivity),
SS=sum((Hyperactivity-Means)^2),
SD=sd(Hyperactivity),
SEM=SD/N^.5)
knitr::kable(Means.Table, digits = 2)
library(ggplot2)
Means.Table$Condition<-factor(Means.Table$Condition,
levels = c("ADHD","Control","Trauma"),
labels = c("ADHD","Control","Trauma"))
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col()+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Joint Action')+
ylab('Mean Trust Rating')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
library(ggplot2)
Means.Table$Condition<-factor(Means.Table$Condition,
levels = c("ADHD","Control","Trauma"),
labels = c("ADHD","Control","Trauma"))
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col()+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Mental Health Status')+
ylab('Hyperactivity Scores')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(fig.width=4.25)
knitr::opts_chunk$set(fig.height=4.0)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(results='hold')
library(ggplot2)
Means.Table$birth<-factor(Means.Table$birth,
levels = c("Single","Twin","Triplet"),
labels = c("Single","Twin","Triplet"))
View(JA.Study.E1)
library(ggplot2)
Means.Table$Condition<-factor(Means.Table$Condition,
levels = c("ADHD","Control","Trauma"),
labels = c("ADHD","Control","Trauma"))
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col((aes(fill=Hyperactivity))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Mental Health Status')+
ylab('BASC Hyperactivity Scores')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
library(ggplot2)
Means.Table$Condition<-factor(Means.Table$Condition,
levels = c("ADHD","Control","Trauma"),
labels = c("ADHD","Control","Trauma"))
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col(aes(fill=Hyperactivity))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Mental Health Status')+
ylab('BASC Hyperactivity Scores')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
library(ggplot2)
Means.Table$Condition<-factor(Means.Table$Condition,
levels = c("ADHD","Control","Trauma"),
labels = c("ADHD","Control","Trauma"))
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col(aes(fill=Condition))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Mental Health Status')+
ylab('BASC Hyperactivity Scores')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(fig.width=4.25)
knitr::opts_chunk$set(fig.height=4.0)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(results='hold')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(fig.width=4.25)
knitr::opts_chunk$set(fig.height=4.0)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(results='hold')
n=5; r=2; c=3;
Example.Data<-data.frame(ID=seq(1:(n*r*c)),
Level=c(rep("Low",(n*c)),rep("High",(n*c))),
Type=rep(c(rep("Watching",n),rep("Reading",n),rep("Thinking",n)),2),
Percieved.Ability = c(1,3,3,4,2,3,2,3,1,4,3,3,2,3,1,
6,4,7,5,5,5,3,2,3,2,3,2,1,4,4))
# Also, I want to re-set the order using the `factor` command and set the order I want.
Example.Data$Level<-factor(Example.Data$Level,
levels = c("Low","High"),
labels = c("Low","High"))
Example.Data$Type<-factor(Example.Data$Type,
levels = c("Watching","Reading","Thinking"),
labels = c("Watching","Reading","Thinking"))
library(dplyr)
Means.Table<-Example.Data %>%
group_by(Level,Type) %>%
summarise(N=n(),
Means=mean(Percieved.Ability),
SS=sum((Percieved.Ability-Means)^2),
SD=sd(Percieved.Ability),
SEM=SD/N^.5)
knitr::kable(Means.Table, digits = 2)
# Note remember knitr::kable makes it pretty, but you can just call `Means.Table`
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Level))+
geom_col(aes(group=Level, fill=Level), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
scale_fill_manual(values=c("#f44141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
library(afex)
ANOVA.JA.Table<-aov_car(Percieved.Ability~Level*Type + Error(ID),
data=Example.Data, return='Anova')
ANOVA.JA.Table
library(afex)
Nice.JA.Table<-aov_car(Percieved.Ability~Level*Type + Error(ID),
data=Example.Data)
Nice.JA.Table
SS_level=ANOVA.JA.Table$`Sum Sq`[2]
SS_Type=ANOVA.JA.Table$`Sum Sq`[3]
SS_inter=ANOVA.JA.Table$`Sum Sq`[4]
SS_w=ANOVA.JA.Table$`Sum Sq`[5]
SS_T=SS_level+SS_Type+SS_inter+SS_w
n2_a=SS_level/(SS_T)
n2_b=SS_Type/(SS_T)
n2_axb=SS_inter/(SS_T)
n2_w=SS_w/SS_T
slices <- c(n2_a,n2_b,n2_axb,n2_w)
lbls <- c("Level", "Type","Level X Type","Error")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percent to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Parsed Variance: \nEta-Sq")
library(car)
leveneTest(Percieved.Ability ~ Level*Type, data = Example.Data)
qqnorm(Example.Data$Percieved.Ability)
qqline(Example.Data$Percieved.Ability)
shapiro.test(Example.Data$Percieved.Ability)
shapiro.test(Example.Data$Percieved.Ability)
setwd(/Users/rachel/Box\ Sync/R\ Coursework/Class13/)
setwd(Users/rachel/Box\ Sync/R\ Coursework/Class13/)
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class13/")
Example.Data<-("Raw Data for R.csv")
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class13/")
Example.Data<-("Raw Data for R.csv")
Example.Data$Amount<-factor(Example.Data$AmtofInfo,
levels = c(1,2),
labels = c("Low", "High"))
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class13/")
Example.Data<-("Raw Data for R.csv")
Example.Data$Amount<-factor(Example.Data$AmtofInfo,
levels = c(1,2),
labels = c("Low", "High"))
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class13/")
Example.Data<-read.csv("Raw Data for R.csv")
Example.Data$Amount<-factor(Example.Data$AmtofInfo,
levels = c(1,2),
labels = c("Low", "High"))
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class13/")
Example.Data<-read.csv("Raw Data for R.csv")
Example.Data$Amount<-factor(Example.Data$AmtofInfo,
levels = c(1,2),
labels = c("Low", "High"))
Example.Data
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class13/")
Example.Data<-read.csv("Raw Data for R.csv")
Example.Data$Amount<-factor(Example.Data$AmtofInfo,
levels = c(1,2),
labels = c("Low", "High"))
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class13/")
Example.Data<-read.csv("Raw Data for R.csv")
Example.Data$Amount<-factor(Example.Data$AmtOfInfo,
levels = c(1,2),
labels = c("Low", "High"))
Example.Data$Type<-factor(Example.Data$TypeOfInfo,
levels = c(1,2,3),
labels = c("Watching", "Reading", "Control"))
Example.Data
library(dplyr)
Means.Table<-Example.Data %>%
group_by(Level,Type) %>%
summarise(N=n(),
Means=mean(Percieved.Ability),
SS=sum((Percieved.Ability-Means)^2),
SD=sd(Percieved.Ability),
SEM=SD/N^.5)
library(dplyr)
Means.Table<-Example.Data %>%
group_by(Level,Type) %>%
summarise(N=n(),
Means=mean(Percieved_Ability),
SS=sum((Percieved_Ability-Means)^2),
SD=sd(Percieved_Ability),
SEM=SD/N^.5)
library(dplyr)
Means.Table<-Example.Data %>%
group_by(Level,Type) %>%
summarise(N=n(),
Means=mean(Perceived_Ability),
SS=sum((Perceived_Ability-Means)^2),
SD=sd(Perceived_Ability),
SEM=SD/N^.5)
library(dplyr)
Means.Table<-Example.Data %>%
group_by(Level,Type) %>%
summarise(N=n(),
Means=mean(Perceived_Ability),
SS=sum((Perceived_Ability-Means)^2),
SD=sd(Perceived_Ability),
SEM=SD/N^.5)
library(dplyr)
Means.Table<-Example.Data %>%
group_by(Amount,Type) %>%
summarise(N=n(),
Means=mean(Perceived_Ability),
SS=sum((Perceived_Ability-Means)^2),
SD=sd(Perceived_Ability),
SEM=SD/N^.5)
knitr::kable(Means.Table, digits = 2)
# Note remember knitr::kable makes it pretty, but you can just call `Means.Table`
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Level))+
geom_col(aes(group=Level, fill=Level), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+ #dodge separates the columns into groups
scale_fill_manual(values=c("#f44141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(), #this makes the box outline open on top
legend.title=element_blank())
Plot.1
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Amount))+
geom_col(aes(group=Level, fill=Level), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+ #dodge separates the columns into groups
scale_fill_manual(values=c("#f44141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(), #this makes the box outline open on top
legend.title=element_blank())
Plot.1
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Amount))+
geom_col(aes(group=Level, fill=Amount), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+ #dodge separates the columns into groups
scale_fill_manual(values=c("#f44141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(), #this makes the box outline open on top
legend.title=element_blank())
Plot.1
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Amount))+
geom_col(aes(group=Amount, fill=Amount), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+ #dodge separates the columns into groups
scale_fill_manual(values=c("#f44141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(), #this makes the box outline open on top
legend.title=element_blank())
Plot.1
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Amount))+
geom_col(aes(group=Amount, fill=Amount), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+ #dodge separates the columns into groups
scale_fill_manual(values=c("#f42141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(), #this makes the box outline open on top
legend.title=element_blank())
Plot.1
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Amount))+
geom_col(aes(group=Amount, fill=Amount), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+ #dodge separates the columns into groups
scale_fill_manual(values=c("#f141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(), #this makes the box outline open on top
legend.title=element_blank())
Plot.1
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Amount))+
geom_col(aes(group=Amount, fill=Amount), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+ #dodge separates the columns into groups
scale_fill_manual(values=c("#f44141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(), #this makes the box outline open on top
legend.title=element_blank())
Plot.1
library(car)
leveneTest(Percieved.Ability ~ Level*Type, data = Example.Data)
library(car)
leveneTest(Percieved.Ability ~ Amount*Type, data = Example.Data)
library(car)
leveneTest(Perceived_Ability ~ Amount*Type, data = Example.Data)
qqnorm(Example.Data$Perceived_Ability)
qqline(Example.Data$Perceived_Ability)
shapiro.test(Example.Data$Perceived_Ability)
shapiro.test(Example.Data$Perceived_Ability)
library(afex)
ANOVA.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(ID),
data=Example.Data, return='Anova')
library(afex)
ANOVA.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(p_number),
data=Example.Data, return='Anova')
library(afex)
ANOVA.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(p_number),
data=Example.Data, return='Anova')
library(afex)
ANOVA.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(p_number),
data=Example.Data, return='Anova')
library(afex)
ANOVA.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(p_number),
data=Example.Data)
library(afex)
Nice.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(p_number),
data=Example.Data)
library(dplyr)
Means.Table<-Example.Data %>%
group_by(Amount,Type) %>%
summarise(N=n(),
Means=mean(Perceived_Ability),
SS=sum((Perceived_Ability-Means)^2),
SD=sd(Perceived_Ability),
SEM=SD/N^.5)
knitr::kable(Means.Table, digits = 2)
# Note remember knitr::kable makes it pretty, but you can just call `Means.Table`
library(afex)
Nice.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(p_number),
data=Example.Data)
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class13/")
Example.Data<-read.csv("Raw Data for R.csv")
Example.Data$Amount<-factor(Example.Data$AmtOfInfo,
levels = c(1,2),
labels = c("Low", "High"))
Example.Data$Type<-factor(Example.Data$TypeOfInfo,
levels = c(1,2,3),
labels = c("Watching", "Reading", "Control"))
Example.Data
library(dplyr)
Means.Table<-Example.Data %>%
group_by(Amount,Type) %>%
summarise(N=n(),
Means=mean(Perceived_Ability),
SS=sum((Perceived_Ability-Means)^2),
SD=sd(Perceived_Ability),
SEM=SD/N^.5)
knitr::kable(Means.Table, digits = 2)
# Note remember knitr::kable makes it pretty, but you can just call `Means.Table`
library(ggplot2)
Plot.1<-ggplot(Means.Table, aes(x = Type, y = Means, group=Amount))+
geom_col(aes(group=Amount, fill=Amount), position=position_dodge(width=0.9))+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+ #dodge separates the columns into groups
scale_fill_manual(values=c("#f44141","#4286f4"))+
xlab('')+
ylab('Percieved Ability')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(), #this makes the box outline open on top
legend.title=element_blank())
Plot.1
library(car)
leveneTest(Perceived_Ability ~ Amount*Type, data = Example.Data)
qqnorm(Example.Data$Perceived_Ability)
qqline(Example.Data$Perceived_Ability)
shapiro.test(Example.Data$Perceived_Ability)
library(afex)
Nice.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(p_number),
data=Example.Data)
library(afex)
Nice.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(ID),
data=Example.Data)
library(afex)
Nice.JA.Table<-aov_car(Perceived_Ability~Level*Type + Error(p_number),
data=Example.Data)
library(afex)
Nice.JA.Table<-aov_car(Perceived_Ability~Amount*Type + Error(p_number),
data=Example.Data)
Nice.JA.Table
