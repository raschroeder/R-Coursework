xlim=c(-5.25, 5.25))
abline(v=z.cut.lower, col=c("blue", "red","purple","orange","black"),lty=c(1,2,3,4,5))
abline(v=z.cut.upper, col=c("blue", "red","purple","orange","black"),lty=c(1,2,3,4,5))
n=36
set.seed(666)
sample<-sample(Population, n, replace = TRUE)
# we use TRUE in the replace to mean that the probability of each kid being sampled remains constant even though in reality that isn't possible
sample.1<-sample+rnorm(n,mean=2,sd=0)
hist(sample.1,
main="Histogram",
xlab="Hyperactivity Score", ylab="Frequency")
M = mean(sample.1)
Mu = 50 # given to you from the population
sigma = 5 # given to you, don't use sample SD for z-test # if you don't have sigma, use the SD of the sample
Ztest <- (M - Mu) / (sigma/sqrt(n))
alpha=c(.005/2)
z.cut.lower=qnorm(alpha)
z.cut.upper=qnorm(alpha)*-1
plot(density(scale(Population)),
main="Probability Density Function: a = .005",
xlab="Hyperactivity Score [z-score]", ylab="Probability",
xlim=c(-3.25, 3.25))
abline(v=z.cut.lower, col=c("purple"),lty=c(1))
abline(v=z.cut.upper, col=c("purple"),lty=c(1))
abline(v=Ztest, col=c("red"),lty=c(2))
P.two.tailed=2*pnorm(-abs(Ztest))
P.one.tailed=pnorm(-abs(Ztest))
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(1, 5, 30)
colors <- c("red", "blue", "darkgreen", "black")
labels <- c("df=1", "df=5", "df=30", "normal")
plot(x, hx, type="l", lty=1, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
for (i in 1:4){
lines(x, dt(x,degf[i]), lty=i+1, lwd=1, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=1, lty=c(2, 3, 4, 1), col=colors)
# adapted from http://www.statmethods.net/advgraphs/probability.html
alpha = .05/2
zcrit <- -qnorm(alpha)
#create degrees of freedom
dfs <- seq(1, 30, by=1)
tcrit <- -qt(alpha,dfs)
plot(dfs, tcrit, type="l", lty=1, xlab="Degrees of Freedom",
ylab="t-crit", main="Alpha = .05")
abline(h=zcrit, col="red")
set.seed(42)
# extact a sample of 30 people, that has +9 effect on IQ
n = 30
MeanIQ.effect = 109
SDIQ = 15
Mozart.Sample <- rnorm(n,MeanIQ.effect,SDIQ)
hist(Mozart.Sample, xlab="IQ scores",main="Mozart Effect")
# t-test
?t.test
Mozart.t.test<-t.test(Mozart.Sample,
alternative = c("two.sided"),
mu = 100, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Mozart.t.test #call the results
# to get effect sizes (I wrote a function for you to do one-sample effect sizes)
one.sample.d<-function(HitErotic1,mu){
d = (mean(HitErotic1)-mu)/sd(HitErotic1)
return(d)
}
one.sample.bem<-
one.sample.d<-function(HitErotic1,.5){
d = (mean(HitErotic1)-.5)/sd(HitErotic1)
return(d)
}
one.sample.bem<-
one.sample.d<-function(HitErotic1,.5)
{d = (mean(HitErotic1)-.5)/sd(HitErotic1)
return(d)
}
one.sample.bem<-
one.sample.d<-function(HitErotic1,mu)
{d = (mean(HitErotic1)-mu)/sd(HitErotic1)
return(d)
}
one.sample.bem
one.sample.bem<-
one.sample.d<-function(HitErotic1,mu)
{d = (mean(HitErotic1)-mu)/sd(HitErotic1)
return(d)
}
one.sample.bem
?t.test
Bem.t.test<-t.test(HitErotic1,
alternative = c("two.sided"),
mu = 100, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
?t.test
Bem.t.test<-t.test(HitErotic1,
alternative = c("one.sided"),
mu = 100, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
library(effsize)
install.packages("effsize")
library(effsize)
Obs.d<-cohen.d(Mozart.Sample.2, Bach.Sample, pooled=TRUE,paired=FALSE,
na.rm=FALSE, hedges.correction=FALSE,
conf.level=0.95)
one.sample.bem<-
one.sample.d<-function(HitErotic1,mu)
{d = (mean(HitErotic1)-mu)/sd(HitErotic1)
return(d)
}
one.sample.bem()
one.sample.bem
Bem.t.test<-t.test(HitErotic1,
alternative = c("two.sided"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
Bem.t.test<-one.sample.d(HitErotic1,.5)
Bem.t.test
?t.test
Bem.t.test.power<-t.test(HitErotic2,
alternative = c("two.sided"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test.power #call the results
# Effect size
Bem.t.test.power<-one.sample.d(HitErotic2,.5)
Bem.t.test.power
Bem.t.test<-one.sample.d(HitErotic1,.5)
Bem.t.test
library(pwr)
Bem.Power.95<-pwr.t.test(n = NULL, d = .22, power = .95, sig.level = 0.05,
type = c("one.sample"), alternative = c("two.sided"))
Bem.Power.95
Bem.t.test.effect<-one.sample.d(HitErotic1,.5)
Bem.t.test.effect
?t.test
Bem.t.test<-t.test(HitErotic1,
alternative = c("one.sided"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
?t.test
Bem.t.test<-t.test(HitErotic1,
alternative = c("greater"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
?t.test
Bem.t.test<-t.test(HitErotic1,
alternative = c("less"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
?t.test
Bem.t.test<-t.test(HitErotic1,
alternative = c("greater"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
?t.test
Bem.t.test.power<-t.test(HitErotic2,
alternative = c("two.sided"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test.power #call the results
Rep.1.E<-t.test(HitErotic1,
alternative = c("two.sided"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Rep.1.E
Bem.t.test.effect<-one.sample.d(HitErotic1,.5)
Bem.t.test.effect
?t.test
Bem.t.test.power<-t.test(HitErotic2,
alternative = c("two.sided"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test.power #call the results
Bem.t.test<-t.test(HitErotic1,
alternative = c("greater"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
Bem.t.test.power.effect<-one.sample.d(HitErotic2,.5)
Bem.t.test.power.effect
Rep.1.E<-t.test(HitErotic1,
alternative = c("two.sided"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Rep.1.E
?t.test
Bem.t.test<-t.test(HitErotic1,
alternative = c("less"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test #call the results
Rep.1.E<-t.test(HitErotic1,
alternative = c("two.sided"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Rep.1.E
?t.test
Bem.t.test<-t.test(HitErotic1,
alternative = c("greater"),
mu = .5, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
Bem.t.test
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(fig.width=4.25)
knitr::opts_chunk$set(fig.height=4.0)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(results='hold')
n=5; k=3;
JA.Study<-
data.frame(SubNum=seq(1:(k*n)),
Condition=ordered(
c(rep("No",n),
rep("Helpful",n),
rep("Distrupted",n))
),
DV=c(2,3,5,3,2,5,4,7,4,5,2,3,3,1,1))
View(JA.Study)
library(dplyr)
Means.Table<-JA.Study %>%
group_by(Condition) %>%
summarise(N=n(),
Means=mean(DV),
SS=sum((DV-Means)^2),
SD=sd(DV),
SEM=SD/N^.5)
knitr::kable(Means.Table, digits = 2)
# Note remember knitr::kable makes it pretty, but you can just call `Means.Table`
library(afex)
install.packages("afex")
library(afex)
ANOVA.JA.Table<-aov_car(DV~Condition + Error(SubNum),
data=JA.Study, return='Anova')
ANOVA.JA.Table
library(ggplot2)
Means.Table$Condition<-factor(Means.Table$Condition,
levels = c("No","Distrupted","Helpful"),
labels = c("No","Distrupted","Helpful"))
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col()+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Joint Action')+
ylab('Mean Trust Rating')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
install.packages("HH")
n=5; k=3
sib.study<-
data.frame(pid=seq(1:(k*n)),
Condition=ordered(
c(rep("Single,n"),
rep("Twin",n),
rep("Triplet", n))
),
DV=c(8,7,10,6,9,4,6,7,4,9,4,4,7,2,3))
n=5; k=3
sib.study<-
data.frame(pid=seq(1:(k*n)),
birth=ordered(
c(rep("Single,n"),
rep("Twin",n),
rep("Triplet", n))
),
DV=c(8,7,10,6,9,4,6,7,4,9,4,4,7,2,3))
n=5; k=3
sib.study<-
data.frame(pid=seq(1:(k*n)),
birth=ordered(
c(rep("Single",n),
rep("Twin",n),
rep("Triplet",n))
),
DV=c(8,7,10,6,9,4,6,7,4,9,4,4,7,2,3))
n=5; k=3
sib.study<-
data.frame(pid=seq(1:(k*n)),
birth=ordered(
c(rep("Single",n),
rep("Twin",n),
rep("Triplet",n))
),
lang=c(8,7,10,6,9,4,6,7,4,9,4,4,7,2,3))
sib.study
library(dplyr)
Means.Table<-sib.study %>%
group_by(birth) %/%
summarise(N=n()
Means=mean(lang),
library(dplyr)
Means.Table<-sib.study %>%
group_by(birth) %/%
summarise(N=n(),
Means=mean(lang),
SS=sum((lang-Means)^2),
SD-sd(lang),
SEM+SD/N^.5)
library(dplyr)
Means.Table<-sib.study %>%
group_by(birth) %/%
summarise(N=n(),
Means=mean(lang),
SS=sum((lang-Means)^2),
SD=sd(lang),
SEM=SD/N^.5)
library(dplyr)
Means.Table<-sib.study %>%
group_by(birth) %>%
summarise(N=n(),
Means=mean(lang),
SS=sum((lang-Means)^2),
SD=sd(lang),
SEM=SD/N^.5)
View(Means.Table)
library(dplyr)
Means.Table<-sib.study %>%
group_by(birth) %>%
summarise(N=n(),
Means=mean(lang),
SS=sum((lang-Means)^2),
SD=sd(lang),
SEM=SD/N^.5)
View(Means.Table)
View(sib.study)
knitr::kable(Means.Table, digits = 2)
library(afex)
ANOVA.sib.Table<-aov_car(lang~birth + Error(pid),
data=sib,study, return='ANOVA')
install.packages("afex")
library(afex)
ANOVA.sib.Table<-aov_car(lang~birth + Error(pid),
data=sib,study, return='ANOVA')
library(afex)
ANOVA.sib.Table<-aov_car(lang~birth + Error(pid),
data=sib.study, return='ANOVA')
library(afex)
ANOVA.sib.Table<-aov_car(lang~birth + Error(pid),
data=sib.study, return='Anova')
ANOVA.sib.Table
library(afex)
ANOVA.sib.Table<-aov_car(lang~birth + Error(pid),
data=sib.study, return='nice')
ANOVA.sib.Table
library(HH)
hov(lang~birth, data=sib.study)
hovPlot(lang~birth, data=sib.study)
qqnorm(sib.study$lang)
qqline(sib.study$lang)
qqnorm(sib.study$lang)
qqline(sib.study$lang)
qqnorm(sib.study$lang)
qqline(sib.study$lang)
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class6/PracticeData.csv")
WordNerdData<-read.csv("PracticeData.csv")
str(WordNerdData)
WordNerdData$Condition<-factor(WordNerdData$Condition,
levels=c(1,2,3,4),
labels=c("Pleasantness of\nMeaning","Frequency of\nWord",
"Pleasantness of\nSound","Frequency of\nSyllables"))
WordNerdData<-read.csv("PracticeData.csv")
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class6/PracticeData.csv")
setwd("/Users/rachel/Box\ Sync/R\ Coursework/")
WordNerdData<-read.csv("PracticeData.csv")
setwd("/Users/rachel/Box\ Sync/R\ Coursework/")
WordNerdData<-read.csv("PracticeData.csv")
setwd("/Users/rachel/Box\ Sync/R\ Coursework")
WordNerdData<-read.csv("PracticeData.csv")
setwd("/Users/rachel/Box\ Sync/R\ Coursework/Class6")
WordNerdData<-read.csv("PracticeData.csv")
str(WordNerdData)
WordNerdData$Condition<-factor(WordNerdData$Condition,
levels=c(1,2,3,4),
labels=c("Pleasantness of\nMeaning","Frequency of\nWord",
"Pleasantness of\nSound","Frequency of\nSyllables"))
library(dplyr)
Means.Table<-WordNerdData %>%
group_by("Pleasantness of\nMeaning","Frequency of\nWord", "Pleasantness of\nSound","Frequency of\nSyllables") %>%
summarise(N=n(),
Means=mean(Recall),
SS=sum((Recall-Means)^2),
SD=sd(Recall),
SEM=SD/N^.5)
Means.Table
library(dplyr)
Means.Table<-WordNerdData %>%
group_by(Condition) %>%
summarise(N=n(),
Means=mean(Recall),
SS=sum((Recall-Means)^2),
SD=sd(Recall),
SEM=SD/N^.5)
Means.Table
ANOVA.Table<-aov_car(Recall~Condition + Error(SubNum),
data=WordNerdData)
ANOVA.Table
Means.Table
View(WordNerdData)
View(Means.Table)
library(ggplot2)
Means.Table$Condition<-factor(Means.Table$Condition,
levels = c("Pleasantness of\nMeaning","Frequency of\nWord","Pleasantness of\nSound","Frequency of\nSyllables"),
labels = c("Pleasantness of\nMeaning","Frequency of\nWord","Pleasantness of\nSound","Frequency of\nSyllables"))
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col()+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Rating Condition')+ # name these yourself
ylab('Number Recalled')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
View(Plot.1)
Plot.1<-ggplot(Means.Table, aes(x = Condition, y = Means))+
geom_col()+
scale_y_continuous(expand = c(0, 0))+ # Forces plot to start at zero
geom_errorbar(aes(ymax = Means + SEM, ymin= Means - SEM),
position=position_dodge(width=0.9), width=0.25)+
xlab('Rating Condition')+ # name these yourself
ylab('Number Recalled')+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
axis.line=element_line(),
legend.title=element_blank())
Plot.1
library(afex)
ANOVA.Table<-aov_car(Recall~Condition + Error(SubNum),
data=WordNerdData)
ANOVA.Table
library(afex)
Word.ANOVA<-aov_car(Recall~Condition + Error(ID),
data=WordNerdData)
Word.ANOVA
library(HH)
hov(Recall~Condition, data=WordNerdData)
hovPlot(Recall~Condition, data=WordNerdData)
Fitted.Model<-emmeans(Word.ANOVA, ~Condition)
set1 <- list(
H1 = c(-2,2,-2.2))
Fitted.Model
Planned<-contrast(Fitted.Model, set3, adjust = "none")
Planned<-contrast(Fitted.Model, set1, adjust = "none")
Fitted.Model<-emmeans(Word.ANOVA, ~Condition)
set1 <- list(
H1 = c(-2,2,-2,2))
Planned<-contrast(Fitted.Model, set1, adjust = "none")
Planned
Fitted.Model<-emmeans(Word.ANOVA, ~Condition)
set2 <- list(
H2 = c(0,2,0,2))
Fitted.Model
Planned<-contrast(Fitted.Model, set2, adjust = "none")
Planned
Fitted.Model<-emmeans(Word.ANOVA, ~Condition)
set3 <- list(
H3 = c(-2,2,-2,2))
Fitted.Model
Planned<-contrast(Fitted.Model, set3, adjust = "none")
Planned
Fitted.Model<-emmeans(ANOVA.Table, ~Condition)
Fitted.Model<-emmeans(Word.ANOVA, ~Condition)
pairs(Fitted.Model, adjust='bon')
Fitted.Model<-emmeans(Word.ANOVA, ~Condition)
set2 <- list(
H2 = c(0,2,0,-2))
Fitted.Model
Planned<-contrast(Fitted.Model, set2, adjust = "none")
Planned
install.packages("effsize")
Word.ANOVA
t_to_do<-function(t,df){
d<-(2*t)/(df)^.5
return(d)
}
# use the t and the df from the anova output
t_to_d(4.064,60)
t_to_d<-function(t,df){
d<-(2*t)/(df)^.5
return(d)
}
# use the t and the df from the anova output
t_to_d(4.064,60)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(fig.width=4.25)
knitr::opts_chunk$set(fig.height=4.0)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(fig.pos = 'H')
knitr::opts_chunk$set(results='hold')
